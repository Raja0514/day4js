/*
‚ö° Why Use try?

1Ô∏è‚É£ Prevents the program from crashing

2Ô∏è‚É£ Allows execution to continue even if an error occurs

3Ô∏è‚É£ Provides meaningful error messages for debugging

4Ô∏è‚É£ Improves user experience by handling errors gracefully

*/

/*
‚úÖ How try...catch Works

1Ô∏è‚É£ Without try...catch (Uncaught Error)

If an error occurs in JavaScript and is not handled, the script execution stops immediately.


*/

console.log("Start");

//let result = 10 / testVar;  // uncaught ReferenceError :testVar is not defined

//console.log("End")   // this line never execute

//üî¥ Issue: The program stops execution after the error.


/*
2Ô∏è‚É£ With try...catch (Error Handled)

Using try...catch, we catch the error and allow the program to continue running.

*/

//console.log("Start");

try {

  let result = 10 / testVar; // ‚ùå ReferenceError occurs here
}

catch (e) {

  console.log("Error caught:", e.message); // ‚úÖ Logs error instead of crashing
}

finally{
  console.log("done")
}

console.log("End"); // ‚úÖ This now runs!

//üü¢ Fix: Even though an error occurs, execution continues after catch, and "End" is printed.


//üîπ Structure of try...catch

try {

    // Code that may cause an error

  }
  
  catch (error) {

    // Code that runs when an error occurs

  } 
  
  finally {

    // (Optional) Code that always runs, whether an error occurred or not

  }
  